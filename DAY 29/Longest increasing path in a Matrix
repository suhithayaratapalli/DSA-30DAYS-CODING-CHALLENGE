DAY 29- LC329

class Solution {
    int m,n;
    public int longestIncreasingPath(int[][] matrix) {
        this.m = matrix.length;
        this.n = matrix[0].length;
        int[][] path = new int[m][n];
        int max = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(path[i][j]==0){
                    path[i][j] = dp(i,j,matrix,path);
                }
                max = Math.max(path[i][j],max);
            }
        }
        return max;
    }

    public int dp(int i,int j,int[][] grid,int[][] path){
        if(path[i][j]!=0) return path[i][j];
        int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
        int max = 0;
        for(int[] dir:dirs){
            int row = i+dir[0];
            int col = j+dir[1];
            if(row<0 || row>=m || col<0 || col>=n || grid[row][col]<=grid[i][j]) continue;
            max = Math.max(dp(row,col,grid,path),max);
        }
        path[i][j] = max+1;
        return max+1;
    }
}


